#pragma once
#ifndef GAUSS_LEGENDRE_HPP
#define GAUSS_LEGENDRE_HPP

#include <iostream>
#include <vector>

// Gaussâ€“Legendre quadrature points and weights built-in file.
// with options: 16, 32, 50, 64, 80, 100, 160, 200, 320, 640.
namespace gauss_legendre
{

const std::vector<double> zeros8 = {-0.9602898564975362, -0.7966664774136267, -0.525532409916329, -0.18343464249564978,
                                    0.18343464249564978, 0.525532409916329,   0.7966664774136267, 0.9602898564975362};

const std::vector<double> weights8 = {0.10122853629037669, 0.22238103445337434, 0.31370664587788705,
                                      0.36268378337836177, 0.36268378337836177, 0.31370664587788705,
                                      0.22238103445337434, 0.10122853629037669};

const std::vector<double> zeros10 = {
    -0.9739065285171717, -0.8650633666889845, -0.6794095682990244, -0.4333953941292472, -0.14887433898163122,
    0.14887433898163122, 0.4333953941292472,  0.6794095682990244,  0.8650633666889845,  0.9739065285171717};

const std::vector<double> weights10 = {0.06667134430868807, 0.14945134915058036, 0.219086362515982,  0.2692667193099965,
                                       0.295524224714753,   0.295524224714753,   0.2692667193099965, 0.219086362515982,
                                       0.14945134915058036, 0.06667134430868807};

const std::vector<double> zeros12 = {-0.9815606342467192, -0.9041172563704748, -0.7699026741943047, -0.5873179542866175,
                                     -0.3678314989981802, -0.1252334085114689, 0.1252334085114689,  0.3678314989981802,
                                     0.5873179542866175,  0.7699026741943047,  0.9041172563704748,  0.9815606342467192};

const std::vector<double> weights12 = {0.04717533638651202, 0.10693932599531888, 0.1600783285433461,
                                       0.20316742672306565, 0.23349253653835464, 0.2491470458134027,
                                       0.2491470458134027,  0.23349253653835464, 0.20316742672306565,
                                       0.1600783285433461,  0.10693932599531888, 0.04717533638651202};

const std::vector<double> zeros14 = {
    -0.9862838086968123,  -0.9284348836635735,  -0.827201315069765,  -0.6872929048116855, -0.5152486363581541,
    -0.31911236892788974, -0.10805494870734367, 0.10805494870734367, 0.31911236892788974, 0.5152486363581541,
    0.6872929048116855,   0.827201315069765,    0.9284348836635735,  0.9862838086968123};

const std::vector<double> weights14 = {
    0.035119460331752374, 0.0801580871597603,  0.12151857068790296, 0.1572031671581934,  0.18553839747793763,
    0.20519846372129555,  0.21526385346315766, 0.21526385346315766, 0.20519846372129555, 0.18553839747793763,
    0.1572031671581934,   0.12151857068790296, 0.0801580871597603,  0.035119460331752374};

const std::vector<double> zeros16 = {-0.989400934991650, -0.944575023073233, -0.865631202387832, -0.755404408355003,
                                     -0.617876244402644, -0.458016777657227, -0.281603550779259, -0.095012509837637,
                                     0.095012509837637,  0.281603550779259,  0.458016777657227,  0.617876244402644,
                                     0.755404408355003,  0.865631202387832,  0.944575023073233,  0.989400934991650};

const std::vector<double> weights16 = {0.02715245941, 0.06225352394, 0.09515851168, 0.1246289713,
                                       0.1495959888,  0.1691565194,  0.182603415,   0.1894506105,
                                       0.1894506105,  0.182603415,   0.1691565194,  0.1495959888,
                                       0.1246289713,  0.09515851168, 0.06225352394, 0.02715245941};

const std::vector<double> zeros18 = {
    -0.9915651684209309, -0.9558239495713978,  -0.8926024664975557, -0.8037049589725231,  -0.6916870430603532,
    -0.5597708310739475, -0.41175116146284263, -0.2518862256915055, -0.08477501304173529, 0.08477501304173529,
    0.2518862256915055,  0.41175116146284263,  0.5597708310739475,  0.6916870430603532,   0.8037049589725231,
    0.8926024664975557,  0.9558239495713978,   0.9915651684209309};

const std::vector<double> weights18 = {
    0.02161601352648413, 0.04971454889496922, 0.07642573025488925, 0.10094204410628699, 0.12255520671147836,
    0.14064291467065063, 0.15468467512626521, 0.16427648374583273, 0.16914238296314363, 0.16914238296314363,
    0.16427648374583273, 0.15468467512626521, 0.14064291467065063, 0.12255520671147836, 0.10094204410628699,
    0.07642573025488925, 0.04971454889496922, 0.02161601352648413};

const std::vector<double> zeros20 = {
    -0.9931285991850949, -0.9639719272779138, -0.9122344282513258,  -0.8391169718222188, -0.7463319064601508,
    -0.636053680726515,  -0.5108670019508271, -0.37370608871541955, -0.2277858511416451, -0.07652652113349734,
    0.07652652113349734, 0.2277858511416451,  0.37370608871541955,  0.5108670019508271,  0.636053680726515,
    0.7463319064601508,  0.8391169718222188,  0.9122344282513258,   0.9639719272779138,  0.9931285991850949};

const std::vector<double> weights20 = {
    0.017614007139153273, 0.04060142980038622, 0.06267204833410944, 0.08327674157670467, 0.10193011981724026,
    0.11819453196151825,  0.13168863844917653, 0.14209610931838187, 0.14917298647260366, 0.15275338713072578,
    0.15275338713072578,  0.14917298647260366, 0.14209610931838187, 0.13168863844917653, 0.11819453196151825,
    0.10193011981724026,  0.08327674157670467, 0.06267204833410944, 0.04060142980038622, 0.017614007139153273};

const std::vector<double> zeros22 = {
    -0.9942945854823992,  -0.9700604978354287, -0.926956772187174,   -0.8658125777203002,  -0.7878168059792081,
    -0.6944872631866827,  -0.5876404035069116, -0.46935583798675706, -0.34193582089208424, -0.2078604266882213,
    -0.06973927331972221, 0.06973927331972221, 0.2078604266882213,   0.34193582089208424,  0.46935583798675706,
    0.5876404035069116,   0.6944872631866827,  0.7878168059792081,   0.8658125777203002,   0.926956772187174,
    0.9700604978354287,   0.9942945854823992};

const std::vector<double> weights22 = {
    0.014627995298274705, 0.03377490158481518, 0.05229333515268287, 0.0697964684245202,  0.0859416062170674,
    0.10041414444288072,  0.11293229608053883, 0.12325237681051199, 0.13117350478706188, 0.13654149834601478,
    0.13925187285563156,  0.13925187285563156, 0.13654149834601478, 0.13117350478706188, 0.12325237681051199,
    0.11293229608053883,  0.10041414444288072, 0.0859416062170674,  0.0697964684245202,  0.05229333515268287,
    0.03377490158481518,  0.014627995298274705};

const std::vector<double> zeros24 = {
    -0.9951872199970213, -0.9747285559713095,  -0.9382745520027328, -0.886415527004401,  -0.820001985973903,
    -0.7401241915785544, -0.6480936519369755,  -0.5454214713888396, -0.4337935076260451, -0.3150426796961634,
    -0.1911188674736163, -0.06405689286260563, 0.06405689286260563, 0.1911188674736163,  0.3150426796961634,
    0.4337935076260451,  0.5454214713888396,   0.6480936519369755,  0.7401241915785544,  0.820001985973903,
    0.886415527004401,   0.9382745520027328,   0.9747285559713095,  0.9951872199970213};

const std::vector<double> weights24 = {
    0.012341229799987091, 0.028531388628933743, 0.04427743881741955,  0.05929858491543674, 0.07334648141108041,
    0.08619016153195329,  0.09761865210411406,  0.1074442701159656,   0.11550566805372561, 0.12167047292780342,
    0.1258374563468283,   0.12793819534675221,  0.12793819534675221,  0.1258374563468283,  0.12167047292780342,
    0.11550566805372561,  0.1074442701159656,   0.09761865210411406,  0.08619016153195329, 0.07334648141108041,
    0.05929858491543674,  0.04427743881741955,  0.028531388628933743, 0.012341229799987091};

const std::vector<double> zeros26 = {
    -0.9958857011456169, -0.9783854459564709,  -0.9471590666617142,  -0.9026378619843071, -0.845445942788498,
    -0.7763859488206788, -0.6964272604199573,  -0.6066922930176181,  -0.5084407148245057, -0.4030517551234863,
    -0.2920048394859569, -0.17685882035689018, -0.05923009342931321, 0.05923009342931321, 0.17685882035689018,
    0.2920048394859569,  0.4030517551234863,   0.5084407148245057,   0.6066922930176181,  0.6964272604199573,
    0.7763859488206788,  0.845445942788498,    0.9026378619843071,   0.9471590666617142,  0.9783854459564709,
    0.9958857011456169};

const std::vector<double> weights26 = {
    0.010551372617343395, 0.024417851092631938, 0.03796238329436312, 0.05097582529714808, 0.06327404632957467,
    0.07468414976565976,  0.08504589431348507,  0.09421380035591416, 0.10205916109442532, 0.10847184052857647,
    0.11336181654631956,  0.11666044348529646,  0.11832141527926213, 0.11832141527926213, 0.11666044348529646,
    0.11336181654631956,  0.10847184052857647,  0.10205916109442532, 0.09421380035591416, 0.08504589431348507,
    0.07468414976565976,  0.06327404632957467,  0.05097582529714808, 0.03796238329436312, 0.024417851092631938,
    0.010551372617343395};

const std::vector<double> zeros28 = {
    -0.9964424975739544, -0.9813031653708728, -0.9542592806289382, -0.9156330263921321,   -0.865892522574395,
    -0.8056413709171791, -0.7356108780136318, -0.656651094038865,  -0.5697204718114017,   -0.4758742249551183,
    -0.3762515160890787, -0.2720616276351781, -0.1645692821333808, -0.055079289884034266, 0.055079289884034266,
    0.1645692821333808,  0.2720616276351781,  0.3762515160890787,  0.4758742249551183,    0.5697204718114017,
    0.656651094038865,   0.7356108780136318,  0.8056413709171791,  0.865892522574395,     0.9156330263921321,
    0.9542592806289382,  0.9813031653708728,  0.9964424975739544};

const std::vector<double> weights28 = {
    0.009124282593094397, 0.02113211259277127, 0.03290142778230452, 0.044272934759003985, 0.055107345675716936,
    0.06527292396699975,  0.07464621423456881, 0.08311341722890093, 0.09057174439303285,  0.09693065799792992,
    0.10211296757806078,  0.10605576592284637, 0.10871119225829413, 0.11004701301647524,  0.11004701301647524,
    0.10871119225829413,  0.10605576592284637, 0.10211296757806078, 0.09693065799792992,  0.09057174439303285,
    0.08311341722890093,  0.07464621423456881, 0.06527292396699975, 0.055107345675716936, 0.044272934759003985,
    0.03290142778230452,  0.02113211259277127, 0.009124282593094397};

const std::vector<double> zeros32 = {
    -0.9972638618494816,  -0.9856115115452684,  -0.9647622555875064,  -0.9349060759377397,  -0.8963211557660522,
    -0.84936761373257,    -0.7944837959679424,  -0.7321821187402897,  -0.6630442669302152,  -0.5877157572407623,
    -0.5068999089322294,  -0.42135127613063533, -0.33186860228212767, -0.23928736225213706, -0.1444719615827965,
    -0.04830766568773831, 0.04830766568773831,  0.1444719615827965,   0.23928736225213706,  0.33186860228212767,
    0.42135127613063533,  0.5068999089322294,   0.5877157572407623,   0.6630442669302152,   0.7321821187402897,
    0.7944837959679424,   0.84936761373257,     0.8963211557660522,   0.9349060759377397,   0.9647622555875064,
    0.9856115115452684,   0.9972638618494816};

const std::vector<double> weights32 = {
    0.007018610009469298, 0.016274394730905965, 0.025392065309262427, 0.034273862913021626, 0.042835898022226426,
    0.050998059262376244, 0.058684093478535704, 0.06582222277636175,  0.07234579410884845,  0.07819389578707031,
    0.08331192422694685,  0.08765209300440391,  0.09117387869576386,  0.09384439908080457,  0.09563872007927483,
    0.09654008851472781,  0.09654008851472781,  0.09563872007927483,  0.09384439908080457,  0.09117387869576386,
    0.08765209300440391,  0.08331192422694685,  0.07819389578707031,  0.07234579410884845,  0.06582222277636175,
    0.058684093478535704, 0.050998059262376244, 0.042835898022226426, 0.034273862913021626, 0.025392065309262427,
    0.016274394730905965, 0.007018610009469298};

const std::vector<double> zeros40 = {
    -0.9982377097105593,  -0.9907262386994571, -0.9772599499837743, -0.9579168192137917,  -0.9328128082786765,
    -0.9020988069688743,  -0.8659595032122596, -0.8246122308333117, -0.7783056514265194,  -0.7273182551899271,
    -0.6719566846141796,  -0.6125538896679803, -0.5494671250951282, -0.4830758016861787,  -0.413779204371605,
    -0.3419940908257585,  -0.2681521850072537, -0.1926975807013711, -0.11608407067525521, -0.038772417506050816,
    0.038772417506050816, 0.11608407067525521, 0.1926975807013711,  0.2681521850072537,   0.3419940908257585,
    0.413779204371605,    0.4830758016861787,  0.5494671250951282,  0.6125538896679803,   0.6719566846141796,
    0.7273182551899271,   0.7783056514265194,  0.8246122308333117,  0.8659595032122596,   0.9020988069688743,
    0.9328128082786765,   0.9579168192137917,  0.9772599499837743,  0.9907262386994571,   0.9982377097105593};

const std::vector<double> weights40 = {
    0.004521277098530018, 0.010498284531151609, 0.016421058381907345, 0.022245849194166653, 0.027937006980023528,
    0.03346019528254768,  0.03878216797447238,  0.043870908185673324, 0.048695807635072405, 0.053227846983937115,
    0.05743976909939189,  0.06130624249292932,  0.06480401345660149,  0.0679120458152344,   0.07061164739128717,
    0.07288658239580448,  0.07472316905796868,  0.07611036190062674,  0.07703981816424839,  0.07750594797842533,
    0.07750594797842533,  0.07703981816424839,  0.07611036190062674,  0.07472316905796868,  0.07288658239580448,
    0.07061164739128717,  0.0679120458152344,   0.06480401345660149,  0.06130624249292932,  0.05743976909939189,
    0.053227846983937115, 0.048695807635072405, 0.043870908185673324, 0.03878216797447238,  0.03346019528254768,
    0.027937006980023528, 0.022245849194166653, 0.016421058381907345, 0.010498284531151609, 0.004521277098530018};

const std::vector<double> zeros50 = {
    -0.9988664044200710501855, -0.994031969432090712585,  -0.985354084048005882309,  -0.9728643851066920737133,
    -0.9566109552428079429978, -0.9366566189448779337809, -0.9130785566557918930897, -0.8859679795236130486375,
    -0.8554297694299460846114, -0.821582070859335948356,  -0.784555832900399263905,  -0.744494302226068538261,
    -0.70155246870682225109,   -0.6558964656854393607816, -0.6077029271849502391804, -0.5571583045146500543155,
    -0.5044581449074642016515, -0.449806334974038789147,  -0.3934143118975651273942, -0.335500245419437356837,
    -0.2762881937795319903276, -0.2160072368760417568473, -0.1548905899981459020716, -0.0931747015600861408545,
    -0.0310983383271888761123, 0.0310983383271888761123,  0.09317470156008614085445, 0.154890589998145902072,
    0.2160072368760417568473,  0.2762881937795319903276,  0.335500245419437356837,   0.3934143118975651273942,
    0.4498063349740387891471,  0.5044581449074642016515,  0.5571583045146500543155,  0.60770292718495023918,
    0.6558964656854393607816,  0.7015524687068222510896,  0.7444943022260685382605,  0.7845558329003992639053,
    0.8215820708593359483563,  0.8554297694299460846114,  0.8859679795236130486375,  0.9130785566557918930897,
    0.9366566189448779337809,  0.9566109552428079429978,  0.9728643851066920737133,  0.985354084048005882309,
    0.9940319694320907125851,  0.9988664044200710501855};

const std::vector<double> weights50 = {
    0.002908622553155251234946, 0.006759799195745420236081, 0.01059054838365101371134, 0.01438082276148568323937,
    0.01811556071348929125575,  0.02178024317012477312216,  0.02536067357001245414772, 0.02884299358053532547075,
    0.03221372822357802812032,  0.03545983561514620685529,  0.0385687566125877054346,  0.04152846309014774500712,
    0.04432750433880326690339,  0.04695505130394844739428,  0.04940093844946640694316, 0.05165570306958123386609,
    0.0537106218889963626939,   0.0555577448062124917838,   0.05718992564772843595344, 0.0586008498132225275068,
    0.05978505870426555762753,  0.06073797084177025989993,  0.06145589959031670657108, 0.0619360674206832703681,
    0.0621766166553473012546,   0.0621766166553473012546,   0.0619360674206832703681,  0.06145589959031670657108,
    0.06073797084177025989993,  0.05978505870426555762753,  0.0586008498132225275068,  0.05718992564772843595344,
    0.0555577448062124917838,   0.0537106218889963626939,   0.05165570306958123386609, 0.04940093844946640694316,
    0.04695505130394844739428,  0.04432750433880326690339,  0.04152846309014774500712, 0.0385687566125877054346,
    0.03545983561514620685529,  0.03221372822357802812032,  0.02884299358053532547075, 0.02536067357001245414772,
    0.02178024317012477312216,  0.01811556071348929125575,  0.01438082276148568323937, 0.01059054838365101371134,
    0.006759799195745420236081, 0.002908622553155251234946};

const std::vector<double> zeros64 = {
    -0.9993050417357722,  -0.9963401167719552,  -0.9910133714767443,  -0.983336253884626,  -0.973326827789911,
    -0.9610087996520538,  -0.9464113748584028,  -0.9295691721319396,  -0.9105221370785028, -0.8893154459951141,
    -0.8659993981540928,  -0.8406292962525803,  -0.8132653151227975,  -0.7839723589433414, -0.7528199072605319,
    -0.7198818501716108,  -0.6852363130542333,  -0.6489654712546573,  -0.6111553551723933, -0.571895646202634,
    -0.5312794640198946,  -0.48940314570705296, -0.4463660172534641,  -0.4022701579639916, -0.3572201583376681,
    -0.31132287199021097, -0.2646871622087674,  -0.21742364374000708, -0.1696444204239928, -0.12146281929612056,
    -0.07299312178779904, -0.02435029266342443, 0.02435029266342443,  0.07299312178779904, 0.12146281929612056,
    0.1696444204239928,   0.21742364374000708,  0.2646871622087674,   0.31132287199021097, 0.3572201583376681,
    0.4022701579639916,   0.4463660172534641,   0.48940314570705296,  0.5312794640198946,  0.571895646202634,
    0.6111553551723933,   0.6489654712546573,   0.6852363130542333,   0.7198818501716108,  0.7528199072605319,
    0.7839723589433414,   0.8132653151227975,   0.8406292962525803,   0.8659993981540928,  0.8893154459951141,
    0.9105221370785028,   0.9295691721319396,   0.9464113748584028,   0.9610087996520538,  0.973326827789911,
    0.983336253884626,    0.9910133714767443,   0.9963401167719552,   0.9993050417357722};

const std::vector<double> weights64 = {
    0.0017832807216942152, 0.004147033260562923, 0.006504457968979654, 0.008846759826364391, 0.011168139460131466,
    0.013463047896718231,  0.015726030476025082, 0.0179517157756973,   0.020134823153530094, 0.022270173808383007,
    0.024352702568710853,  0.026377469715054627, 0.028339672614259702, 0.030234657072402495, 0.03205792835485145,
    0.03380516183714179,   0.03547221325688232,  0.03705512854024015,  0.03855015317861559,  0.03995374113272035,
    0.041262563242623486,  0.0424735151236536,   0.043583724529323464, 0.044590558163756545, 0.045491627927418114,
    0.046284796581314375,  0.04696818281621,     0.0475401657148303,   0.04799938859645832,  0.048344762234802954,
    0.048575467441503456,  0.04869095700913975,  0.04869095700913975,  0.048575467441503456, 0.048344762234802954,
    0.04799938859645832,   0.0475401657148303,   0.04696818281621,     0.046284796581314375, 0.045491627927418114,
    0.044590558163756545,  0.043583724529323464, 0.0424735151236536,   0.041262563242623486, 0.03995374113272035,
    0.03855015317861559,   0.03705512854024015,  0.03547221325688232,  0.03380516183714179,  0.03205792835485145,
    0.030234657072402495,  0.028339672614259702, 0.026377469715054627, 0.024352702568710853, 0.022270173808383007,
    0.020134823153530094,  0.0179517157756973,   0.015726030476025082, 0.013463047896718231, 0.011168139460131466,
    0.008846759826364391,  0.006504457968979654, 0.004147033260562923, 0.0017832807216942152};

const std::vector<double> zeros80 = {
    -0.9995538226516306,  -0.9976498643982377,  -0.9942275409656882,  -0.9892913024997555,   -0.9828485727386291,
    -0.9749091405857278,  -0.9654850890437993,  -0.9545907663436349,  -0.9422427613098727,   -0.9284598771724458,
    -0.9132631025717577,  -0.8966755794387706,  -0.8787225676782139,  -0.859431406663111,    -0.8388314735802553,
    -0.8169541386814635,  -0.7938327175046055,  -0.7695024201350413,  -0.7440002975835973,   -0.7173651853620999,
    -0.6896376443420276,  -0.6608598989861199,  -0.631075773046872,   -0.6003306228297517,   -0.5686712681227097,
    -0.536145920897132,   -0.5028041118887849,  -0.4686966151705445,  -0.4338753708317561,   -0.39839340588196925,
    -0.3623047534994873,  -0.32566437074770194, -0.28852805488451183, -0.25095235839227215,  -0.21299450285766613,
    -0.1747122918326468,  -0.1361640228091439,  -0.09740839844158461, -0.058504437152420666, -0.019511383256793996,
    0.019511383256793996, 0.058504437152420666, 0.09740839844158461,  0.1361640228091439,    0.1747122918326468,
    0.21299450285766613,  0.25095235839227215,  0.28852805488451183,  0.32566437074770194,   0.3623047534994873,
    0.39839340588196925,  0.4338753708317561,   0.4686966151705445,   0.5028041118887849,    0.536145920897132,
    0.5686712681227097,   0.6003306228297517,   0.631075773046872,    0.6608598989861199,    0.6896376443420276,
    0.7173651853620999,   0.7440002975835973,   0.7695024201350413,   0.7938327175046055,    0.8169541386814635,
    0.8388314735802553,   0.859431406663111,    0.8787225676782139,   0.8966755794387706,    0.9132631025717577,
    0.9284598771724458,   0.9422427613098727,   0.9545907663436349,   0.9654850890437993,    0.9749091405857278,
    0.9828485727386291,   0.9892913024997555,   0.9942275409656882,   0.9976498643982377,    0.9995538226516306};

const std::vector<double> weights80 = {
    0.0011449500031885224, 0.002663533589513713, 0.004180313124695047, 0.005690922451403673, 0.007192904768117152,
    0.008683945269261395,  0.010161766041102983, 0.011624114120797644, 0.013068761592400866, 0.014493508040508975,
    0.015896183583725406,  0.01727465205626924,  0.018626814208298613, 0.019950610878142407, 0.021244026115781908,
    0.02250509024633233,   0.02373188286592992,  0.024922535764115357, 0.02607523576756492,  0.027188227500486207,
    0.028259816057276736,  0.02928836958326768,  0.030272321759557783, 0.03121017418811484,  0.03210049867348784,
    0.03294193939764526,   0.03373321498461144,  0.034473120451753846, 0.03516052904474753,  0.035794393953415986,
    0.03637374990583587,   0.03689771463827592,  0.03736549023873043,  0.03777636436200133,  0.03812971131447754,
    0.03842499300695934,   0.038661759774076425, 0.03883965105905189,  0.03895839596276948,  0.03901781365630659,
    0.03901781365630659,   0.03895839596276948,  0.03883965105905189,  0.038661759774076425, 0.03842499300695934,
    0.03812971131447754,   0.03777636436200133,  0.03736549023873043,  0.03689771463827592,  0.03637374990583587,
    0.035794393953415986,  0.03516052904474753,  0.034473120451753846, 0.03373321498461144,  0.03294193939764526,
    0.03210049867348784,   0.03121017418811484,  0.030272321759557783, 0.02928836958326768,  0.028259816057276736,
    0.027188227500486207,  0.02607523576756492,  0.024922535764115357, 0.02373188286592992,  0.02250509024633233,
    0.021244026115781908,  0.019950610878142407, 0.018626814208298613, 0.01727465205626924,  0.015896183583725406,
    0.014493508040508975,  0.013068761592400866, 0.011624114120797644, 0.010161766041102983, 0.008683945269261395,
    0.007192904768117152,  0.005690922451403673, 0.004180313124695047, 0.002663533589513713, 0.0011449500031885224};

const std::vector<double> zeros100 = {
    -0.9997137267734413,  -0.9984919506395958,  -0.9962951347331251,  -0.9931249370374434,   -0.9889843952429918,
    -0.983877540706057,   -0.9778093584869183,  -0.9707857757637064,  -0.9628136542558156,   -0.9539007829254917,
    -0.944055870136256,   -0.9332885350430795,  -0.921609298145334,   -0.9090295709825297,   -0.895561644970727,
    -0.8812186793850184,  -0.8660146884971647,  -0.8499645278795913,  -0.8330838798884008,   -0.8153892383391762,
    -0.7968978923903145,  -0.7776279096494955,  -0.7575981185197072,  -0.7368280898020207,   -0.7153381175730564,
    -0.693149199355802,   -0.670283015603141,   -0.6467619085141293,  -0.6226088602037078,   -0.5978474702471788,
    -0.5725019326213812,  -0.5465970120650941,  -0.520158019881763,   -0.49321078920819095,  -0.465781649773358,
    -0.4378974021720315,  -0.40958529167830154, -0.38087298162462996, -0.3517885263724217,   -0.32236034390052914,
    -0.292617188038472,   -0.2625881203715035,  -0.23230248184497396, -0.20178986409573602,  -0.17108008053860327,
    -0.14020313723611397, -0.10918920358006111, -0.07806858281343663, -0.046871682421591634, -0.015628984421543084,
    0.015628984421543084, 0.046871682421591634, 0.07806858281343663,  0.10918920358006111,   0.14020313723611397,
    0.17108008053860327,  0.20178986409573602,  0.23230248184497396,  0.2625881203715035,    0.292617188038472,
    0.32236034390052914,  0.3517885263724217,   0.38087298162462996,  0.40958529167830154,   0.4378974021720315,
    0.465781649773358,    0.49321078920819095,  0.520158019881763,    0.5465970120650941,    0.5725019326213812,
    0.5978474702471788,   0.6226088602037078,   0.6467619085141293,   0.670283015603141,     0.693149199355802,
    0.7153381175730564,   0.7368280898020207,   0.7575981185197072,   0.7776279096494955,    0.7968978923903145,
    0.8153892383391762,   0.8330838798884008,   0.8499645278795913,   0.8660146884971647,    0.8812186793850184,
    0.895561644970727,    0.9090295709825297,   0.921609298145334,    0.9332885350430795,    0.944055870136256,
    0.9539007829254917,   0.9628136542558156,   0.9707857757637064,   0.9778093584869183,    0.983877540706057,
    0.9889843952429918,   0.9931249370374434,   0.9962951347331251,   0.9984919506395958,    0.9997137267734413};

const std::vector<double> weights100 = {
    0.0007346344905008809, 0.001709392653517807, 0.002683925371554019, 0.003655961201327216, 0.004624450063421818,
    0.005588428003865117,  0.00654694845084515,  0.007499073255464816, 0.008443871469668721, 0.009380419653694542,
    0.01030780257486916,   0.01122511402318622,  0.012131457662979251, 0.013025947892971715, 0.01390771070371885,
    0.014775884527441474,  0.015629621077546098, 0.01646808617614516,  0.017290460568323632, 0.018095940722128407,
    0.018883739613374886,  0.01965308749443545,  0.020403232646209593, 0.021133442112527594, 0.02184300241624754,
    0.02253122025633626,   0.02319742318525442,  0.023840960265968263, 0.024461202707957153, 0.025057544481579718,
    0.025629402910208283,  0.02617621923954582,  0.02669745918357113,  0.02719261344657694,  0.027661198220792507,
    0.028102755659101357,  0.028516854322395237, 0.028903089601125278, 0.029261084110638446, 0.029590488059912694,
    0.02989097959333295,   0.03016226510516929,  0.030404079526454932, 0.030616186583980524, 0.03079837903115269,
    0.030950478850491105,  0.03107233742756666,  0.031163835696210035, 0.03122488425484948,  0.03125542345386349,
    0.03125542345386349,   0.03122488425484948,  0.031163835696210035, 0.03107233742756666,  0.030950478850491105,
    0.03079837903115269,   0.030616186583980524, 0.030404079526454932, 0.03016226510516929,  0.02989097959333295,
    0.029590488059912694,  0.029261084110638446, 0.028903089601125278, 0.028516854322395237, 0.028102755659101357,
    0.027661198220792507,  0.02719261344657694,  0.02669745918357113,  0.02617621923954582,  0.025629402910208283,
    0.025057544481579718,  0.024461202707957153, 0.023840960265968263, 0.02319742318525442,  0.02253122025633626,
    0.02184300241624754,   0.021133442112527594, 0.020403232646209593, 0.01965308749443545,  0.018883739613374886,
    0.018095940722128407,  0.017290460568323632, 0.01646808617614516,  0.015629621077546098, 0.014775884527441474,
    0.01390771070371885,   0.013025947892971715, 0.012131457662979251, 0.01122511402318622,  0.01030780257486916,
    0.009380419653694542,  0.008443871469668721, 0.007499073255464816, 0.00654694845084515,  0.005588428003865117,
    0.004624450063421818,  0.003655961201327216, 0.002683925371554019, 0.001709392653517807, 0.0007346344905008809};

std::vector<double> get_gauss_legendre_xlist(int n)
{
    switch (n)
    {
        case 8: return zeros8;
        case 10: return zeros10;
        case 12: return zeros12;
        case 14: return zeros14;
        case 16: return zeros16;
        case 18: return zeros18;
        case 20: return zeros20;
        case 22: return zeros22;
        case 24: return zeros24;
        case 26: return zeros26;
        case 28: return zeros28;
        case 32: return zeros32;
        case 50: return zeros50;
        case 64: return zeros64;
        case 80: return zeros80;
        case 100: return zeros100;
        default: std::cerr << "mesh_points_gauss_legendre too large!" << std::endl; std::exit(-1);
    }
}

std::vector<double> get_gauss_legendre_wlist(int n)
{
    switch (n)
    {
        case 8: return weights8;
        case 10: return weights10;
        case 12: return weights12;
        case 14: return weights14;
        case 16: return weights16;
        case 18: return weights18;
        case 20: return weights20;
        case 22: return weights22;
        case 24: return weights24;
        case 26: return weights26;
        case 28: return weights28;
        case 32: return weights32;
        case 50: return weights50;
        case 64: return weights64;
        case 80: return weights80;
        case 100: return weights100;
        default: std::cerr << "mesh_points_gauss_legendre too large!" << std::endl; std::exit(-1);
    }
}

std::vector<double> make_klist(int n, double cgauss)
{
    std::vector<double> temp;
    switch (n)
    {
        case 8:
            for (int i = 0; i < n; i++)
            {
                temp.push_back(cgauss * tan((gauss_legendre::zeros8[i] + 1) * 3.14159265358979323846 / 4.0));
            }
            break;
        case 10:
            for (int i = 0; i < n; i++)
            {
                temp.push_back(cgauss * tan((gauss_legendre::zeros10[i] + 1) * 3.14159265358979323846 / 4.0));
            }
            break;
        case 12:
            for (int i = 0; i < n; i++)
            {
                temp.push_back(cgauss * tan((gauss_legendre::zeros12[i] + 1) * 3.14159265358979323846 / 4.0));
            }
            break;
        case 14:
            for (int i = 0; i < n; i++)
            {
                temp.push_back(cgauss * tan((gauss_legendre::zeros14[i] + 1) * 3.14159265358979323846 / 4.0));
            }
            break;
        case 16:
            for (int i = 0; i < n; i++)
            {
                temp.push_back(cgauss * tan((gauss_legendre::zeros16[i] + 1) * 3.14159265358979323846 / 4.0));
            }
            break;
        case 18:
            for (int i = 0; i < n; i++)
            {
                temp.push_back(cgauss * tan((gauss_legendre::zeros18[i] + 1) * 3.14159265358979323846 / 4.0));
            }
            break;
        case 20:
            for (int i = 0; i < n; i++)
            {
                temp.push_back(cgauss * tan((gauss_legendre::zeros20[i] + 1) * 3.14159265358979323846 / 4.0));
            }
            break;
        case 22:
            for (int i = 0; i < n; i++)
            {
                temp.push_back(cgauss * tan((gauss_legendre::zeros22[i] + 1) * 3.14159265358979323846 / 4.0));
            }
            break;
        case 24:
            for (int i = 0; i < n; i++)
            {
                temp.push_back(cgauss * tan((gauss_legendre::zeros24[i] + 1) * 3.14159265358979323846 / 4.0));
            }
            break;
        case 26:
            for (int i = 0; i < n; i++)
            {
                temp.push_back(cgauss * tan((gauss_legendre::zeros26[i] + 1) * 3.14159265358979323846 / 4.0));
            }
            break;
        case 28:
            for (int i = 0; i < n; i++)
            {
                temp.push_back(cgauss * tan((gauss_legendre::zeros28[i] + 1) * 3.14159265358979323846 / 4.0));
            }
            break;
        case 32:
            for (int i = 0; i < n; i++)
            {
                temp.push_back(cgauss * tan((gauss_legendre::zeros32[i] + 1) * 3.14159265358979323846 / 4.0));
            }
            break;
        case 50:
            for (int i = 0; i < n; i++)
            {
                temp.push_back(cgauss * tan((gauss_legendre::zeros50[i] + 1) * 3.14159265358979323846 / 4.0));
            }
            break;
        case 64:
            for (int i = 0; i < n; i++)
            {
                temp.push_back(cgauss * tan((gauss_legendre::zeros64[i] + 1) * 3.14159265358979323846 / 4.0));
            }
            break;
        case 80:
            for (int i = 0; i < n; i++)
            {
                temp.push_back(cgauss * tan((gauss_legendre::zeros80[i] + 1) * 3.14159265358979323846 / 4.0));
            }
            break;
        case 100:
            for (int i = 0; i < n; i++)
            {
                temp.push_back(cgauss * tan((gauss_legendre::zeros100[i] + 1) * 3.14159265358979323846 / 4.0));
            }
            break;
        default: std::cerr << "mesh_points_gauss_legendre not in the table!" << std::endl; std::exit(-1);
    }
    return temp;
}

// make a s-list for gauss-legendre method.
// return a list containing n elements!
std::vector<double> make_slist(int n, double cgauss)
{
    std::vector<double> temp;
    switch (n)
    {
        case 8:
            for (int i = 0; i < n; i++)
            {
                double xi = zeros8[i];
                double wi = weights8[i];
                temp.push_back(
                    cgauss * (3.14159265358979323846 / 4.0) * wi /
                    (cos((xi + 1.0) * 3.14159265358979323846 / 4.0) * cos((xi + 1.0) * 3.14159265358979323846 / 4.0)));
            }
            break;
        case 10:
            for (int i = 0; i < n; i++)
            {
                double xi = zeros10[i];
                double wi = weights10[i];
                temp.push_back(
                    cgauss * (3.14159265358979323846 / 4.0) * wi /
                    (cos((xi + 1.0) * 3.14159265358979323846 / 4.0) * cos((xi + 1.0) * 3.14159265358979323846 / 4.0)));
            }
            break;
        case 12:
            for (int i = 0; i < n; i++)
            {
                double xi = zeros12[i];
                double wi = weights12[i];
                temp.push_back(
                    cgauss * (3.14159265358979323846 / 4.0) * wi /
                    (cos((xi + 1.0) * 3.14159265358979323846 / 4.0) * cos((xi + 1.0) * 3.14159265358979323846 / 4.0)));
            }
            break;
        case 14:
            for (int i = 0; i < n; i++)
            {
                double xi = zeros14[i];
                double wi = weights14[i];
                temp.push_back(
                    cgauss * (3.14159265358979323846 / 4.0) * wi /
                    (cos((xi + 1.0) * 3.14159265358979323846 / 4.0) * cos((xi + 1.0) * 3.14159265358979323846 / 4.0)));
            }
            break;
        case 16:
            for (int i = 0; i < n; i++)
            {
                double xi = zeros16[i];
                double wi = weights16[i];
                temp.push_back(
                    cgauss * (3.14159265358979323846 / 4.0) * wi /
                    (cos((xi + 1.0) * 3.14159265358979323846 / 4.0) * cos((xi + 1.0) * 3.14159265358979323846 / 4.0)));
            }
            break;
        case 18:
            for (int i = 0; i < n; i++)
            {
                double xi = zeros18[i];
                double wi = weights18[i];
                temp.push_back(
                    cgauss * (3.14159265358979323846 / 4.0) * wi /
                    (cos((xi + 1.0) * 3.14159265358979323846 / 4.0) * cos((xi + 1.0) * 3.14159265358979323846 / 4.0)));
            }
            break;
        case 20:
            for (int i = 0; i < n; i++)
            {
                double xi = zeros20[i];
                double wi = weights20[i];
                temp.push_back(
                    cgauss * (3.14159265358979323846 / 4.0) * wi /
                    (cos((xi + 1.0) * 3.14159265358979323846 / 4.0) * cos((xi + 1.0) * 3.14159265358979323846 / 4.0)));
            }
            break;
        case 22:
            for (int i = 0; i < n; i++)
            {
                double xi = zeros22[i];
                double wi = weights22[i];
                temp.push_back(
                    cgauss * (3.14159265358979323846 / 4.0) * wi /
                    (cos((xi + 1.0) * 3.14159265358979323846 / 4.0) * cos((xi + 1.0) * 3.14159265358979323846 / 4.0)));
            }
            break;
        case 24:
            for (int i = 0; i < n; i++)
            {
                double xi = zeros24[i];
                double wi = weights24[i];
                temp.push_back(
                    cgauss * (3.14159265358979323846 / 4.0) * wi /
                    (cos((xi + 1.0) * 3.14159265358979323846 / 4.0) * cos((xi + 1.0) * 3.14159265358979323846 / 4.0)));
            }
            break;
        case 26:
            for (int i = 0; i < n; i++)
            {
                double xi = zeros26[i];
                double wi = weights26[i];
                temp.push_back(
                    cgauss * (3.14159265358979323846 / 4.0) * wi /
                    (cos((xi + 1.0) * 3.14159265358979323846 / 4.0) * cos((xi + 1.0) * 3.14159265358979323846 / 4.0)));
            }
            break;
        case 28:
            for (int i = 0; i < n; i++)
            {
                double xi = zeros28[i];
                double wi = weights28[i];
                temp.push_back(
                    cgauss * (3.14159265358979323846 / 4.0) * wi /
                    (cos((xi + 1.0) * 3.14159265358979323846 / 4.0) * cos((xi + 1.0) * 3.14159265358979323846 / 4.0)));
            }
            break;
        case 32:
            for (int i = 0; i < n; i++)
            {
                double xi = zeros32[i];
                double wi = weights32[i];
                temp.push_back(
                    cgauss * (3.14159265358979323846 / 4.0) * wi /
                    (cos((xi + 1.0) * 3.14159265358979323846 / 4.0) * cos((xi + 1.0) * 3.14159265358979323846 / 4.0)));
            }
            break;
        case 50:
            for (int i = 0; i < n; i++)
            {
                double xi = zeros50[i];
                double wi = weights50[i];
                temp.push_back(
                    cgauss * (3.14159265358979323846 / 4.0) * wi /
                    (cos((xi + 1.0) * 3.14159265358979323846 / 4.0) * cos((xi + 1.0) * 3.14159265358979323846 / 4.0)));
            }
            break;
        case 64:
            for (int i = 0; i < n; i++)
            {
                double xi = zeros64[i];
                double wi = weights64[i];
                temp.push_back(
                    cgauss * (3.14159265358979323846 / 4.0) * wi /
                    (cos((xi + 1.0) * 3.14159265358979323846 / 4.0) * cos((xi + 1.0) * 3.14159265358979323846 / 4.0)));
            }
            break;
        case 80:
            for (int i = 0; i < n; i++)
            {
                double xi = zeros80[i];
                double wi = weights80[i];
                temp.push_back(
                    cgauss * (3.14159265358979323846 / 4.0) * wi /
                    (cos((xi + 1.0) * 3.14159265358979323846 / 4.0) * cos((xi + 1.0) * 3.14159265358979323846 / 4.0)));
            }
            break;
        case 100:
            for (int i = 0; i < n; i++)
            {
                double xi = zeros100[i];
                double wi = weights100[i];
                temp.push_back(
                    cgauss * (3.14159265358979323846 / 4.0) * wi /
                    (cos((xi + 1.0) * 3.14159265358979323846 / 4.0) * cos((xi + 1.0) * 3.14159265358979323846 / 4.0)));
            }
            break;
        default: std::cerr << "mesh_points_gauss_legendre not in the table!" << std::endl; std::exit(-1);
    }
    return temp;
}

// integration of f(x) in interval [a,b] by gauss-legendre quadrature.
double gauss_legendre_integral(double (*f)(double x), double a, double b, int degree)
{
    double temp = 0;
    std::vector<double> xlist = get_gauss_legendre_xlist(degree);
    std::vector<double> wlist = get_gauss_legendre_wlist(degree);
    for (int i = 0; i < degree; i = i + 1)
    {
        double xx = 0.5 * (b - a) * xlist[i] + 0.5 * (b + a);
        temp = temp + wlist[i] * f(xx);
    }
    temp = 0.5 * (b - a) * temp;
    return temp;
}

// integration of f(x) in interval [a,b] by gauss-legendre quadrature of degree 100.
double gauss_legendre_integral_fixeddegree(double (*f)(double x), double a, double b)
{
    double temp = 0;
    int degree = 100;
    for (int i = 0; i < degree; i = i + 1)
    {
        double xx = 0.5 * (b - a) * zeros100[i] + 0.5 * (b + a);
        temp = temp + weights100[i] * f(xx);
    }
    temp = 0.5 * (b - a) * temp;
    return temp;
}

} // namespace gauss_legendre

#endif // GAUSS_LEGENDRE_HPP